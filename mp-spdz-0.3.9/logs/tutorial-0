Using statistical security parameter 40
got 1 from player 0
got 1 from player 1
expected 3, got 3
expected 2, got 2
expected -1, got -1
expected 2, got 2
expected 1, got 1
expected 1, got 1
expected 0, got 0
expected 0, got 0
expected 0, got 0
expected 1, got 1
expected 2, got 2
expected 9702, got 9702
expected 1.9, got 1.9
expected 2.1, got 2.1
expected -0.2, got -0.2
expected -20, got -20
expected 0, got 0
expected 0, got 0
expected 1, got 1
expected 1, got 1
expected 0, got 0
expected 1, got 1
expected -0.1, got -0.1
Party 0: please input three numbers not adding up to zero
Party 1: please input any three numbers
weighted average: 3.222
expected 2, got 2
expected 3, got 3
Significant amount of unused edaBits of size 15. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 16. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 30. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 31. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 32. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 33. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 40. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 41. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 55. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 64. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 70. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 71. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 72. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 73. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 74. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 87. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused edaBits of size 89. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
Significant amount of unused triples of Tinier distorting the benchmark. This protocol has a large minimum batch size, which makes this unavoidable for small programs.
The following benchmarks are including preprocessing (offline phase).
Time = 190.039 seconds 
Data sent = 7435.18 MB in ~61827 rounds (party 0 only; use '-v' for more details)
Global data sent = 14870.4 MB (all parties)
